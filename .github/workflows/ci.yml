name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install psutil pytest flask-testing
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test application startup
      run: |
        # Test that the application can start without errors
        timeout 10s python app.py || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
    
    - name: Test FFprobe availability
      run: |
        ffprobe -version
    
    - name: Test basic functionality
      run: |
        # Add basic smoke tests here
        python -c "
        import app
        import requests
        # Test that routes are defined
        with app.app.test_client() as client:
            response = client.get('/')
            assert response.status_code == 200
        print('Basic tests passed')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Check for security vulnerabilities
      run: |
        # Check for known security vulnerabilities
        safety check --json || true
        # Run bandit security linter
        bandit -r app.py -f json || true

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        # Create a simple Dockerfile for testing
        cat > Dockerfile << EOF
        FROM python:3.10-slim
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y ffmpeg && rm -rf /var/lib/apt/lists/*
        
        # Set working directory
        WORKDIR /app
        
        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        RUN pip install --no-cache-dir psutil
        
        # Copy application code
        COPY . .
        
        # Expose port
        EXPOSE 8181
        
        # Run application
        CMD ["python", "app.py"]
        EOF
        
        docker build -t live-hls-monitor .
    
    - name: Test Docker container
      run: |
        # Start container in background
        docker run -d -p 8181:8181 --name test-container live-hls-monitor
        sleep 10
        
        # Test that application is responding
        curl -f http://localhost:8181/ || exit 1
        
        # Clean up
        docker stop test-container
        docker rm test-container
